#!/usr/bin/env ruby

#===-- configure -----------------------------------------------------------===#
#
#  uvg is an embeddable hardware accelerated vector graphics library.
#
#  This file is distributed under the terms described in LICENSE.
#
#  Author(s):
#
#    * Michael Williams <mwilliams@polyswf.org>
#
#===------------------------------------------------------------------------===#

## \file configure
## \brief Specifies compile-time, link-time, and runtime behaviours via conf.mk.
##

require 'optparse'
require 'ostruct'
require 'rbconfig'

class SwitchesAndOptions
  def self.switch(name)
    (ENV['UVG_CONFIG_' + name.upcase] == 'yes')
  end

  private_class_method :switch

  def self.option(name)
    if ENV.include? 'UVG_CONFIG_' + name.upcase
      ENV['UVG_CONFIG_' + name.upcase]
    end
  end

  private_class_method :option

  def self.is_known_configuration?(configuration)
    case configuration.downcase
    when "debug"
      true
    when "release"
      true
    else
      false
    end
  end

  private_class_method :is_known_configuration?

  def self.architecture
    host_cpu = RbConfig::CONFIG['host_cpu'].downcase
    if host_cpu =~ /i[0-6]86/i
      "x86"
    elsif host_cpu == "x86_64"
      "x86-64"
    else
      abort("Unknown 'host_cpu' #{host_cpu}!")
    end
  end

  private_class_method :architecture

  def self.is_known_architecture?(architecture)
    case architecture.downcase
    when "x86"
      true
    when "x86-64"
      true
    when "arm"
      true
    else
      false
    end
  end

  private_class_method :is_known_architecture?

  def self.is_supported_architecture?(architecture)
    case architecture.downcase
    when "x86"
      true
    when "x86-64"
      true
    when "arm"
      false
    else
      false
    end
  end

  private_class_method :is_supported_architecture?

  def self.toolchain
    host_os = RbConfig::CONFIG['host_os']
    if host_os =~ /mingw/i
      "gcc"
    elsif host_os =~ /darwin/i
      "clang"
    elsif host_os =~ /linux/i
      "gcc"
    else
      abort("Unknown 'host_os' #{host_os}!")
    end
  end

  private_class_method :toolchain

  def self.is_known_toolchain?(toolchain)
    case toolchain.downcase
    when "gcc"
      true
    when "clang"
      true
    when "msvc"
      true
    else
      false
    end
  end

  private_class_method :is_known_toolchain?

  def self.is_supported_toolchain?(toolchain)
    host_os = RbConfig::CONFIG['host_os']
    case toolchain.downcase
    when "gcc"
      if host_os =~ /mingw/i
        true
      else
        true
      end
    when "clang"
      if host_os =~ /mingw/i
        false
      else
        true
      end
    when "msvc"
      if host_os =~ /mingw/i
        true
      else
        false
      end
    else
      false
    end
  end

  private_class_method :is_supported_toolchain?

  def self.platform
    host_os = RbConfig::CONFIG['host_os']
    if host_os =~ /mingw/i
      "windows-mingw"
    elsif host_os =~ /darwin/i
      "macosx"
    elsif host_os =~ /linux/i
      "linux"
    else
      abort("Unknown 'host_os' #{host_os}!")
    end
  end

  private_class_method :platform

  def self.is_known_platform?(platform)
    case platform.downcase
    when "windows-mingw"
      true
    when "macosx"
      true
    when "linux"
      true
    else
      false
    end
  end

  private_class_method :is_known_platform?

  def self.is_supported_platform?(platform)
    case platform.downcase
    when "windows-mingw"
      true
    when "macosx"
      false
    when "linux"
      true
    else
      false
    end
  end

  private_class_method :is_supported_platform?

  def self.yes_or_no(value)
    if value
      "yes"
    else
      "no"
    end
  end

  private_class_method :yes_or_no

  def self.parse(args)
    switches_and_options = OpenStruct.new

    switches_and_options.paranoid     = (switch 'paranoid')
    switches_and_options.config       = (option 'config')
    switches_and_options.architecture = (option 'architecture')
    switches_and_options.toolchain    = (option 'toolchain')
    if ENV.include? 'CC'
      switches_and_options.toolchain = ENV['CC'].downcase
    end
    switches_and_options.platform     = (option 'platform')
    switches_and_options.linkage      = (option 'linkage')
      switches_and_options.linkage ||= 'static'
    switches_and_options.windows_sdk  = (option 'windows_sdk')
    switches_and_options.vs_path      = (option 'vs_path')

    parser = OptionParser.new do |opts|
      opts.banner =  "Usage: ./configure [switches and options]"
      opts.separator ""
      opts.separator "Switches & Options:"

      opts.on("--paranoid", "Enables paranoid checks.") do
        switches_and_options.paranoid = true
      end

      opts.on("--configuration=CONFIG", "Selects debug, development, or release configuration.") do |config|
        switches_and_options.config = config.downcase
      end

      opts.on("--architecture=ARCHITECTURE", "Target the specified architecture.") do |architecture|
        switches_and_options.architecture = architecture
      end

      opts.on("--toolchain=COMPILER", "Uses the specified toolchain.") do |toolchain|
        switches_and_options.toolchain = toolchain
      end

      opts.on("--platform=PLATFORM", "Targets the specified platform.") do |platform|
        switches_and_options.platform = if platform.downcase == 'windows'
                                          'windows-mingw'
                                        else
                                          platform
                                        end
      end

      opts.on("--linkage=LINKAGE", "Specifies static or dynamic linkage.") do |linkage|
        switches_and_options.linkage = linkage.downcase
      end

      opts.on("--windows-sdk=PATH", "Path to Windows SDK.") do |sdk|
        switches_and_options.windows_sdk = sdk
      end

      opts.on("--vs-path=PATH", "Path to Microsoft Visual Studio.") do |vs_path|
        switches_and_options.vs_path = vs_path
      end

      opts.on("--h", "--help") do
        puts parser
        exit
      end
    end

    parser.parse!(args.dup)
    return switches_and_options
  end

  def self.sane?(switches_and_options)
    if not switches_and_options.config
      puts "No configuration specified, defaulting to 'debug'..."
      switches_and_options.config = 'debug'
    else
      if not (is_known_configuration? switches_and_options.config)
        puts "Unknown configuration '#{switches_and_options.config}'!"
        return false
      end
    end

    if switches_and_options.architecture
      if is_known_architecture? switches_and_options.architecture
        if not (is_supported_architecture? switches_and_options.architecture)
          puts "Unsupported architecture '#{switches_and_options.architecture}'!"
          return false
        end
      else
        puts "Unknown architecture '#{switches_and_options.architecture}'!"
        return false
      end
    else
      switches_and_options.architecture = architecture
      puts "No architecture specified, defaulting to '#{switches_and_options.architecture}'..."
      if not (is_supported_architecture? switches_and_options.architecture)
        puts "Unsupported architecture '#{switches_and_options.architecture}'!"
        return false
      end
    end

    if switches_and_options.toolchain
      if is_known_toolchain? switches_and_options.toolchain
        if not(is_supported_toolchain? switches_and_options.toolchain)
          puts "Unsupported toolchain '#{switches_and_options.toolchain}'!"
          return false
        end
      else
        puts "Unknown toolchain '#{switches_and_options.toolchain}'!"
        return false
      end
    else
      switches_and_options.toolchain = toolchain
      puts "No toolchain specified, defaulting to '#{switches_and_options.toolchain}'..."
      if not (is_supported_toolchain? switches_and_options.toolchain)
        puts "Unsupported toolchain '#{switches_and_options.toolchain}'!"
        return false
      end
    end

    if switches_and_options.platform
      if is_known_platform? switches_and_options.platform
        if not(is_supported_platform? switches_and_options.platform)
          puts "Unsupported platform '#{switches_and_options.platform}'!"
          return false
        end
      else
        puts "Unknown platform '#{switches_and_options.platform}'!"
        return false
      end
    else
      switches_and_options.platform = platform
      puts "No platform specified, defaulting to '#{switches_and_options.platform}'..."
      if not (is_supported_platform? switches_and_options.platform)
        puts "Unsupported platform '#{switches_and_options.platform}'!"
        return false
      end
    end

    if switches_and_options.linkage != 'static' && switches_and_options.linkage != 'dynamic'
      puts "Unknown linkage '#{switches_and_options.linkage}'"
      return false
    end

    if switches_and_options.toolchain.downcase == 'msvc'
      if not switches_and_options.windows_sdk
        puts "Path to Windows SDK not specified!"
        return false
      elsif not switches_and_options.vs_path
        puts "Path to Microsoft Visual Studio not specified!"
        return false
      end
    end

    true
  end

  def self.generate(switches_and_options, path)
    File.open(path, 'wb') do |f|
      f.write "#===-- conf.mk -----------------------------------------------------------===#\n"
      f.write "#\n"
      f.write "#  uvg is an embeddable hardware accelerated vector graphics library.\n"
      f.write "#\n"
      f.write "#  This file is distributed under the terms described in LICENSE.\n"
      f.write "#\n"
      f.write "#  Author(s):\n"
      f.write "#\n"
      f.write "#    * Michael Williams <mwilliams@polyswf.org>\n"
      f.write "#\n"
      f.write "#===----------------------------------------------------------------------===#\n"
      f.write "\n"
      f.write "## \file conf.mk\n"
      f.write "## \brief An auto-generated file by ./configure that specifies compile-, link-,\n"
      f.write "## and runtime behaviour.\n"
      f.write "##\n"
      f.write "\n"

      f.write "ifndef _UVG_BUILD_CONFIG_\n"
      f.write "_UVG_BUILD_CONFIG_ := 1\n"
      f.write "\n"

      f.write "PARANOID            := #{yes_or_no(switches_and_options.paranoid)}\n"
      f.write "CONFIGURATION       := #{switches_and_options.config}\n"
      f.write "\n"

      f.write "TOOLCHAIN           := #{switches_and_options.toolchain}\n"
      f.write "\n"

      f.write "TARGET_PLATFORM     := #{switches_and_options.platform}\n"
      f.write "TARGET_ARCHITECTURE := #{switches_and_options.architecture}\n"
      f.write "\n"

      f.write "LINKAGE             := #{switches_and_options.linkage}\n"
      f.write "\n"

      if switches_and_options.toolchain.downcase == 'msvc'
        f.write "WINDOWS_SDK         := #{switches_and_options.windows_sdk}\n"
        f.write "VS_PATH             := #{switches_and_options.vs_path}\n"
        f.write "\n"
      end

      f.write "endif # _UVG_BUILD_CONFIG_\n"
      return true
    end

    false
  end
end

puts "#===------------------------------------------------------------------------===#"
puts "# uvg"
puts "#"

puts ""

at_exit {
  puts ""
  puts "#===----------------------------------------------------------------------===#"
}

switches_and_options = SwitchesAndOptions.parse(ARGV)

if not (SwitchesAndOptions.sane? switches_and_options)
  puts "Configuration failed."
  exit false
end

if not (SwitchesAndOptions.generate(switches_and_options, 'conf.mk'))
  puts "Generation of 'conf.mk' failed."
  File.delete('conf.mk')
  exit false
end

puts "Configuration successful!"
